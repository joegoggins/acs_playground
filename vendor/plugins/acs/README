Acs: Autocompleter Server
=========================

A flexible API for implementing autocompleter's in a Rails app.  

It provides a concise way of exposing its own nested RESTful controller and actions in your appication that yield specific JSON formats for autocompleter client's to digest.

It comes with an autocompleter client install script, which allow you to easily install
different autocompleter flavors to your liking.

INSTALL
=======

1. 
Add this to your routes.rb:
  map.exposes_acs_api "jquery_basic",
    :controller => "dogs",
    :action => "acs_example1", 
    :client => '' # NOT-

It is equivilent to:
	map.resources :things do |things|
	  things.resource :jquery_basic, :only => :none, :member => {
	    # Expected Params
	    #   id: The search query or keys string, keys example:
	    #     431,884,332,553
	    #				OR
	    # 		Thing|123,Dog|898433-332,Person|994 (clustered style)
	    #    n: Max results, TODO: how does this work sith clustered style
		  #    f: Filter, constrain DB query in addition to the search query, example:
		  #        f=age_above_9,name_begins_with_joe
		  #    t: Tag, tag results accordingly if matches exist, example:
		  #      	t=age_above_15,age_below_40
	    :list => :post, 
	    :clustered_list => :post,
	    :list_from_keys => :post,
	    :clustered_list_from_keys => :post
	}
	end

2.
Add this to thing.rb
  implements_acs_api

3.
Install the jquery_basic acc (in vendor/acs)
  rake install_client jquery_basic

4.
Add this to the controller that will utilize the jquery_basic autocompleter client
  include Acs::Acc::JqueryBasic

5.
Add this to your view
  <%= form_for @thing do |f| %>
    <%= f.autocompleter :jquery_basic, :action => :list %>
  <% end %>



Tagging and filtering options will need to be exposed in the API by doing something like:
exposes_acs_api ..., :tag_methods => {:age_above, # looks for a method on model
:age_below => lambda {|val| age < val},
:filter_methods => {...NOT SURE HOW THIS WILL WORK...named_scope references???}

}

* Clustered List: exposes_acs_api expects a :models option that specifies N models that all
  implement_acs_api, yields more complex JSON structure.


API controller params:
  :q  	Query, what the user typed                               
 OR
  :k  Primary Keys
		
  

Server API Configuration
  :k  each column on a


GLOSSARY
=======


Copyright (c) 2010 [name of plugin creator], released under the MIT license
