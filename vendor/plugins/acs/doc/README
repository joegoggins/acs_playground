Acs: Autocompleter Server
=========================

A flexible API for implementing autocompleter's in a Rails app.  

It provides a concise way of exposing its own nested RESTful controller and actions in your appication that yield specific JSON formats for autocompleter client's to digest.

It comes with an autocompleter client install script, which allow you to easily install
different autocompleter flavors to your liking.

INSTALL
=======

1. 
Add this to your routes.rb:
  map.connect :dogs do |dogs|
    # This sez--hang a nested singleton "resource" from the dogs controller
    dogs.exposes_acs_api "jquery_basic"
  end

It is equivilent to:
	map.resources :dogs do |dogs|
	  dogs.resource :jquery_basic, :only => [:index], :member => {
	    # Expected Params
	    #   id: The search query or keys string, keys example:
	    #     431,884,332,553
	    #				OR
	    # 		Thing|123,Dog|898433-332,Person|994 (clustered style)
	    #    n: Max results, TODO: how does this work sith clustered style
		  #    f: Filter, constrain DB query in addition to the search query, example:
		  #        f=age_above_9,name_begins_with_joe
		  #    t: Tag, tag results accordingly if matches exist, example:
		  #      	t=age_above_15,age_below_40
	    :list => :post, 
	    :cluster => :post,
	    :list_from_keys => :post,
	    :cluster_from_keys => :post
	  },
   :controller => 'acs/dogs/jquery_basic'
	end

2.
Add this to dog.rb
  implements_acs_api

3.
Install the jquery_basic acc (in vendor/acs)
  rake install_client jquery_basic

4.
Add this to the controller that will utilize the jquery_basic autocompleter client
  include Acs::Acc::JqueryBasic

5.
Add this to your view
  <%= form_for @thing do |f| %>
    <%= f.autocompleter :jquery_basic, :action => :list %>
  <% end %>


ABOUT EACH API ACTION
=====================
  index: Informs the client how to map results to attribute names
         Informs the client what tags and filters are available
  list: Given a search query, yield a list of results
  cluster: Given a search query, yield a list of lists of results
  list_from_keys: Given a set of key value pairs, yield a determinist 
  cluter_from_keys: Given a set of key value pairs, yield a deterministic list of lists

TAGGING & FILTERING
=================== 
Any of the above API actions can potentially accept additional parameters formatted like:
  Tag: 		...&t=age_below_12,age_above_5
  Filter: ...&f=first_name_begins_with_j,last_name_begins_with_g

Acs::Tag's add tags to results that match the criteria, useful for fast client side filtering of results
Acs::Filter's constrain the where clause further and only return results that match the filters

Both tags and filters are configured like follows:
  :tag_and_filter_methods => [
    {:method => :age_below,
     :param_count => 1,
     :param_requirements => Integer
    }
  ]



Copyright (c) 2010 Joe Goggins, released under the MIT license
